plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.client_version
group = project.maven_group

repositories {
    // GitHub
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }

    maven {
        url 'https://m2.dv8tion.net/releases'
    }

    // Litematica
    maven {
        url = "https://www.cursemaven.com"
    }

    // Malilib
    maven {
        url 'https://masa.dy.fi/maven'
    }

    // Meteor
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org"
    }

    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }

    // Other
    maven {
        name = "vram"
        url = "https://maven.vram.io//"
    }

    jcenter()
}

dependencies {
    def library = { id ->
        implementation id
        shadow id
    }

    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.minecraft_version}+${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    implementation "net.fabricmc:fabric-installer:${project.fabric_installer_version}"

    // Compat fixes
    modCompileOnly fabricApi.module("fabric-renderer-indigo", project.api_version)
    modCompileOnly("me.jellysquid.mods:sodium-fabric:${project.sodium_version}") {
        transitive = false
    }
    modCompileOnly("io.vram:canvas-fabric-mc118:1.0.+") {
        transitive = false
    }

    // Baritone integration
    modImplementation "baritone:baritone:${project.baritone_version}"
    include "baritone:baritone:${project.baritone_version}"

    // Litematica integration
    /*modImplementation "curse.maven:litematica-308892:${project.litematica_file_id}"
    include "curse.maven:litematica-308892:${project.litematica_file_id}"*/

    // Malilib for Litematica
    /*modImplementation "fi.dy.masa.malilib:malilib-fabric-/*{project.minecraft_version}*//*1.18.0:${project.malilib_version}"
    include "fi.dy.masa.malilib:malilib-fabric-/*{project.minecraft_version}*//*1.18.0:${project.malilib_version}"*/

    // Discord RPC
    library "com.github.Vatuu:discord-rpc:${project.discord_version}"

    // JSON
    library "org.json:json:${project.json_version}"

    // Flatlaf
    implementation "com.formdev:flatlaf:${project.flatlaf_version}"

    // Music

    // Lava Player
    library "com.github.Walkyst:lavaplayer:${project.lavaplayer_version}"
    library "com.sedmelluq:lava-common:${project.lava_common_version}"
    library "com.sedmelluq:lavaplayer-natives:${project.lavaplayer_natives_version}"

    // Other
    library "org.apache.httpcomponents:httpclient:${project.apache_http_client_version}"
    library "com.fasterxml.jackson.core:jackson-core:${project.jackson_version}"
    library "com.fasterxml.jackson.core:jackson-databind:${project.jackson_version}"
    library "com.fasterxml.jackson.core:jackson-annotations:${project.jackson_version}"
    library "org.jsoup:jsoup:${project.jsoup_version}"
}

loom {
    accessWidenerPath = file("src/main/resources/kultklient.accesswidener")
}

shadowJar {
    configurations = [
        project.configurations.shadow
    ]
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
        filter {
            line -> line.replace("@mc_version@", project.minecraft_version)
        }
    }

    filesMatching("metadata.json") {
        expand "version": project.installer_version
        filter {
            line -> line.replace("@installer_version@", project.installer_version)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}

jar {
    from "LICENSE"

    manifest {
        attributes("Main-Class": project.installer_class)
    }
}

remapJar {
    dependsOn shadowJar
    input.set(shadowJar.archiveFile)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    archiveClassifier.set("javadoc")
    from javadoc
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact(remapJar) {
                builtBy remapJar
            }

            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }

            artifact(javadocJar) {
                builtBy javadocJar
            }
        }
    }
}

apply from: "scripts/packetutils.gradle"
